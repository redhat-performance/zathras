---
# tasks file for aws_create
#
# Create the AWS instance
# 

#
# Setup the various tf files.
#
- name: copy general tf files
  copy:
    src: "tf/{{ item }}"
    dest: "{{ working_dir }}/tf/"
  loop:
    - vars.tf
 
#
# Append tags to end of file
#
- name: copy general tf files
  shell: "cat {{ working_dir }}/add_vars_tf >> {{ working_dir }}/tf//vars.tf"

#
# Copy base file
#
- name: copy base main.
  copy:
    src: "tf/main.tf"
    dest: "{{ working_dir }}/tf/main.tf"

- name: Add tag info in.
  shell: "cat {{ working_dir }}/add_main_vars.tf >> {{ working_dir }}/tf/main.tf"

- name: add in vars for networks
  include_role:
    name:  add_networks


#
# For placement groups
#
- name: Update files for placement groups vm
  block:
  - name: Add placement in
    shell: cat {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/placement >> {{ working_dir }}/tf/main.tf
  - name: Add vm creation in
    shell: sed "s/#  placement_group/  placement_group/g"< {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/vm_no_spot >> {{ working_dir }}/tf/main.tf
    when: config_info.spot_start_price == 0
  - name: Add vm creation  in
    shell: sed "s/#  placement_group/  placement_group/g" < {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/vm_spot < {{ working_dir }}/tf/main.tf
    when: config_info.spot_start_price != 0
  when: config_info.cloud_placement != "none"

- name: Add networking info
  shell: cat {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/networking.tf >> {{ working_dir }}/tf/main.tf

- name: Update files for non placement groups vm
  block:
  - name: non spot vm
    shell: cat {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/vm_no_spot >> {{ working_dir }}/tf/main.tf
    when: config_info.spot_start_price == 0
  - name: non spot vm
    shell: cat {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/vm_spot >> {{ working_dir }}/tf/main.tf
    when: config_info.spot_start_price != 0
  when: config_info.cloud_placement == "none"

- name: Add private networking info
  block:
  - name: Non spot instances
    shell: sed "s/REPLACE_INST/aws_instance/g" < {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/private_net.tf | sed "s/REPLACE_ID/id/g" >> {{ working_dir }}/tf/main.tf
    when:
      - config_info.spot_start_price == 0
  - name: spot instances
    shell: sed "s/REPLACE_INST/aws_spot_instance_request/g" < {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/private_net.tf | sed "s/REPLACE_ID/spot_instance_id/g" >> {{ working_dir }}/tf/main.tf
    when:
      - config_info.spot_start_price != 0
  when:
    - config_info.cloud_numb_networks != 0
    - config_info.cloud_numb_network_type != "public"

- name: copy non spot files
  block:
  - name: create the single system output file
    shell: sed "s/REPLACE_ID/id/g" < {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/outfile.tf | sed "s/REPLACE_INST/aws_instance/g" >> {{ working_dir }}/tf/output.tf
  - name: Append for network
    shell: sed "s/REPLACE_ID/id/g" < {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/outfile_net.tf | sed "s/REPLACE_INST/aws_instance/g" >> {{ working_dir }}/tf/output.tf
    when: config_info.cloud_numb_networks != 0
  - name: Handle disks
    include_tasks: aws_disks.yml
    vars:
      instance_type: "aws_instance"
      instance_id: "id"
      index_in: 0
  - name: Handle disks, with network
    include_tasks: aws_disks.yml
    vars:
      instance_type: "aws_instance"
      instance_id: "id"
      index_in: 1
    when: config_info.cloud_numb_networks != 0
  when: config_info.spot_start_price == 0

- name: copy spot files
  block:
  - name: spot create the single system output file
    shell: sed "s/REPLACE_ID/spot_instance_id/g" < {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/outfile.tf | sed "s/REPLACE_INST/aws_spot_instance_request/g" >> {{ working_dir }}/tf/output.tf
  - name: Append for network
    shell: sed "s/REPLACE_ID/spot_instance_id/g" < {{ config_info.local_run_dir }}/ansible_roles/roles/aws_create/files/tf/outfile_net.tf | sed "s/REPLACE_INST/aws_spot_instance_request/g" >> {{ working_dir }}/tf/output.tf
    when: config_info.cloud_numb_networks != 0
  - name: Handle disks, no network
    include_tasks: aws_disks.yml
    vars:
      instance_type: "aws_spot_instance_request"
      instance_id: "spot_instance_id"
      index_in: 0
  - name: Handle disks, with network
    include_tasks: aws_disks.yml
    vars:
      instance_type: "aws_spot_instance_request"
      instance_id: "spot_instance_id"
      index_in: 1
    when: config_info.cloud_numb_networks != 0
  when: config_info.spot_start_price != 0

#
# Get the AWS uname.
# We first check the config/setup file for the name.  If we do not have a name
# we will pull it from the ansible call aws_caller_info:
#
- name: aws_get_id
  shell: "grep AWS_USER: config/setup 2> /dev/null"
  ignore_errors: yes
  register: aws_name
  no_log: true
  failed_when:  "'IGNORE_IT' in aws_name.stderr"

- name: aws_have_id
  shell: "echo `echo AWS_USER: {{ aws_name.stdout }} | cut -d':' -f 2`"
  register: temp_uname
  when: aws_name.stdout != ""

# 
# Do not have the username defined in config/setup, use the aws_caller_info to get
# our username.
#
- name: aws_need_to_get_id
  block:
  - name: obtain user info from aws
    aws_caller_info:
    register: aws_out

  - name: get the user name
    shell: "echo {{ aws_out.arn }} | cut -d'/' -f2"
    register: temp_uname
  when: aws_name.stdout == ""

#
# Place the user name in ansible_run_vars.yml for future use.
#
- name: record uname
  lineinfile:
    path: "{{ working_dir }}/ansible_run_vars.yml"
    line: "aws_uname: {{ temp_uname.stdout }}"

#
# Needed to keep everything happy. We will change this value when we
# are doing spot creation
# 
- name: Set the spot price
  lineinfile:
    path: "{{ working_dir }}/ansible_spot_price.yml"
    line: "cur_spot_price: 0" 
    create: yes

- name: include spot info
  include_vars:
    file: "{{ working_dir }}/ansible_spot_price.yml"
    name: spot_data

- name: include net dynamic info
  include_vars:
    file: "{{ working_dir }}/ansible_run_vars.yml"
    name: dyn_data

#
# Set up the terraform variables, includes setting the disk parameters.
#
#
- name: Set up terraform vars non spot
  include_role:
    name:  set_up_tf_vars
  vars:
    pbench_ns_tf: pbench.tf
    cloud_change_to: aws_instance

- name: grab aws create start time
  command: "date -u +%s"
  register: aws_create_time_start

- name: aws create server
  include_tasks: aws_instance_create.yml

- name: create end time
  command: "date -u +%s"
  register: aws_create_time_end

#
# Report how long it took to create the image.
#
- name: Report creation time
  lineinfile:
    path: "{{ working_dir }}/cloud_timings"
    line: "instance start_time: {{ (aws_create_time_end.stdout) | int  - (aws_create_time_start.stdout) | int }}"
    create: yes

#
# Record the vpc, security grp and zone for what we just did.
# 
- name: Save aws vpc
  include_tasks: aws_vpc.yml

- name: Save aws placement zone
  include_tasks: aws_place_zone.yml

- name: Save aws security group
  include_tasks: aws_sec_grp.yml

#
# Load in the updated host names.
# 
- name: include net dynamic info
  include_vars:
    file: "{{ working_dir }}/ansible_run_vars.yml"
    name: dyn_data

- name: set_test_host
  add_host:
    name: "{{ dyn_data.test_hostname }}"
    groups: test_group
    ansible_user: "{{ config_info.test_user }}"
    ansible_ssh_private_key_file: "{{ config_info.ssh_key }}"

- name: now add it to the test_group file
  include_role:
    name: add_to_host_group
  vars:
    working_group_file: "{{ working_dir }}/ansible_test_group"
    group_name: "test_group_list"
    host_to_add: "{{ dyn_data.test_hostname }}"

#
# Need to fix it so we can log in without a passwd or prompt
#
- name: set up for auto login to system
  command: "ssh -oStrictHostKeyChecking=no {{ dyn_data.ssh_i_option }} {{ config_info.test_user }}@{{ dyn_data.test_hostname }} cat /etc/hosts"

- name: Set disks for deletion on termination
  block:
  - name: reload net dynamic info
    include_vars:
      file: "{{ working_dir }}/ansible_run_vars.yml"
      name: dyn_data

  - name: get the volumes to terminate
    shell: "aws ec2 describe-volumes --region {{ config_info.cloud_delete_region }} --filters Name=attachment.instance-id,Values={{ dyn_data.aws_instance_id }} Name=attachment.delete-on-termination,Values=false | grep ATTACHMENTS | cut -d'	' -f4"
    register: aws_vol_info

  - name: Set volume termination command
    debug:
      msg: "{{ working_dir }}/aws_set_term_flags {{ dyn_data.aws_instance_id }} \"{{ aws_vol_info.stdout_lines }}\""
  - name: Set volume termination flag
    shell: "{{ working_dir }}/aws_set_term_flags {{ dyn_data.aws_instance_id }} \"{{ aws_vol_info.stdout_lines }}\""

- name: read in aws tf values
  include_vars:
    file: "{{ working_dir }}/tf_results"
    name: aws_tf_info

#
# Retrieve the metadata for the instances created.  Note when we do more then
# two systems a loop will have to be used.
#
- ec2_instance_info:
    instance_ids:
      - "{{ aws_tf_info.aws_instance_id0 }}"
  register: ec2_metadata

- local_action:
    module: copy
    content: "{{ ec2_metadata | to_nice_yaml( width=50, explicit_start=True, explicit_end=True) }}"
    dest: "{{ working_dir }}/meta_data_0.yml"

- name: handle setting up network
  include_tasks: aws_net_setup.yml
  when: config_info.cloud_numb_networks != 0

