---
#
# Ubuntu we have to disable and uninstall apparmor and install slinux.
# This works on 5/17/2024
#
- name: Ubuntu enable
  block:
  - name: stop apparmor
    shell: "systemctl stop apparmor"
  - name: disable apparmor
    shell:  "systemctl disable apparmor"
  - name: uninstall app armor
    shell: "apt-get remove apparmor -y"
  - name: reboot the system now for disabled aparmor to take effect
    reboot:
      reboot_timeout: 1800
  - name: install selinux on ubuntu
    shell: "apt-get install policycoreutils selinux-utils selinux-basics -y"
  - name: Activate selinux
    shell: "selinux-activate"
  - name: reboot the system now for selinux to be enabled.
    reboot:
      reboot_timeout: 1800
  - name: We want permissive for selinux
    shell: "setenforce 0"
    when: (config_info.selinux_level == "permissive")
  - name: We want enforcing for selinux
    fail:
      msg: "We do not support enforcing on Ubuntu at this time."
    when: (config_info.selinux_level == "enforcing")
  - name: reboot the system now to get the proper settings
    reboot:
      reboot_timeout: 1800
  when:
    - (ansible_facts.selinux.status == 'disabled')
    - (config_info.selinux_state == "enabled")
    - (config_info.os_vendor == "ubuntu")

- name: RHEL 2023 selinux
  block:
  #
  # By default, grubby does not have selinux in the boot line.  If it is not there
  # then the system assumes selinux=1
  #
  - name: Get the current selinux state.
    shell: "sestatus | grep \"SELinux status\" | cut -d: -f 2 | sed \"s/ //g\""
    register: selinux_state
  - name: Get name of kernel
    shell: "uname -r"
    register: kernel

  - name: general enablement
    block:
    - name: enable selinux RHEL/amazon
      shell: "grubby --update-kernel=/boot/vmlinuz-{{ kernel.stdout }} --remove-args=\"selinux\""
    #
    # Update the selinux config file
    # 
    - name: First get the line to replace
      shell: "grep ^SELINUX= /etc/selinux/config"
      register: se_line
    - name: Remove config_file
      shell: "rm -rf /tmp/zathras_selinux"
      ignore_errors: yes
    - name: If we want to be enforcing
      shell: "cat /etc/selinux/config | sed \"s/{{ se_line.stdout }}/SELINUX=enforcing/g\" > /tmp/zathras_selinux"
      ignore_errors: yes
      when: (config_info.selinux_level == "enforcing")
    - name: If we want to be permissive
      shell: "cat /etc/selinux/config | sed \"s/{{ se_line.stdout }}/SELINUX=permissive/g\" > /tmp/zathras_selinux"
      ignore_errors: yes
      when: (config_info.selinux_level == "permissive")
    - name: If we want to be disabled via config
      shell: "cat /etc/selinux/config | sed \"s/{{ se_line.stdout }}/SELINUX=disabled/g\" > /tmp/zathras_selinux"
      ignore_errors: yes
      when: (config_info.selinux_level == "disabled")
    - name: Move the file if present
      shell: "mv /tmp/zathras_selinux /etc/selinux/config"
      ignore_errors: yes
    - name: reboot the system now to enable selinux
      reboot:
        reboot_timeout: 1800
    when:
      - (config_info.selinux_state == "enabled")
      - (selinux_state.stdout != "enabled")
#
# If we do not disable via grubby, there is still some selinux code path we call.
# By default, there is no selinux in the grubby boot line.  
#
  - name: general disablement
    block:
    - name: disabling selinux for RHEL/Amazon
      shell: "grubby --update-kernel=/boot/vmlinuz-{{ kernel.stdout }} --args=\"selinux=0\""
    - name: reboot the system now for disabled selinux to take effect
      reboot:
        reboot_timeout: 1800
    #
    # For some unkown reason, we ignore the check 
    # (config_info.selinux_state != "dsiabled") so we will use
    # (config_info.selinux_state != "enabled")
    when: 
      - (config_info.selinux_state != "enabled")
      - (selinux_state.stdout == "enabled")
  when: 
    config_info.os_vendor == "rhel" or
    config_info.os_vendor == "amnazon"
