General configuration files supplied by the user:
Note: As various parts of zathras are moved to using ansible aws modules, the contents of the
file might change.
1) cloud_config/<file_name>
   List of of cloud systems and configurations to create.  See README in cloud_config for
   full details.
2) config/*: ssh configuration files, see config/README
	a) ida_rsa: ssh permission file used by the uperf test. Create your own pair using ssh-keygen
	b) inventory: Ansible inventory file, where to run the zathras ansible on. Default is local.
	b) user.pem_test: ssh permission file used to get into the test system.  For example
	   AWS, it is the ssh key, generated using AWS account.  See
	   https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html for more information.
	   For local systems, it would be the ssh key that allows root to log into the remote system without
	   a password.
3) local_config/*: configuration files for local systems.  For each local system, there will
                   need to be a configuration file by that name, that contains the devices
		   to use.  See local_config/README for more information
4) sys_settings/*: Files that contains sysctl settings to be used during the execution of
		   the tests.  See sys_settings/README for more information.


burden:
	ansible_vars_main.yml: contains the run information for the test scenario
			       including cloud configuration information.
	install_choices: list of packages to install
        install_opts.yml: list of packages that needs to be installed in ansible
			  format.

kick_it_off.sh
	links a  series of files and directories into the run directory 
	linked in
		1) aws_network_create 
		2) config dir
		3) ansible_roles/roles dir
		4) inventory
		5) ten_of_us.yml
	Creates:
		1) ansible_vars.yml, copy of ansible_vars_main.yml, and has added
		   in the following fields
			a) sys_config:  file designating sysctl tunings
			b) init_system: Do we need to set the system up?  Only
			   the first test pass will do this, else will be no
			c) term_system: Terminate the cloud instance if required.
			   Only the last test pass will this be true.

<Cloud creation layer>
	Each cloud creation section (AWS, Azure etc), creates its own set of files to use.

	Generated by general code path.
		1) net_connect_data:  the output from network_create scripts which creates and
		   attaches the networks.  This is generated by the ansible script 
		   connect_systems/tasks/main.yml.  Format is specific to cloud type.
	Expected to be created by each Cloud creation section
		1) ansible_install_group:  The inventory for systems that need to be installed.
		   Format:
			---
			install_group_list:
			  - ec2-174-129-157-150.compute-1.amazonaws.com
		2) ansible_test_group:  The inventory for systems that we are to run the test on.
		   Format:
			---
			install_group_list:
			  - ec2-174-129-157-150.compute-1.amazonaws.com	
		3) ansible_run_vars.yml: List of run time options (network ips etc)
	Files created by AWS:
		1) image.data: Output from the aws create command primary image.
		3) net_image.data: the information from the create command when
		                   we created the 2nd system for networks.
		4) vol_info: contains the volume information for the disks attached to the cloud instance.
			     The data is used for removal of the devices when we are terminating the instance.
			     Created by aws_create_attach_device/tasks/main.yml

<Test operation layer>

Each test is a self contained instance, and creates its own files.  Files that may be created are
-  debug information
-  test results
-  configuration information
-  anything the test creator desires.

If the test does not save the results file to a permanent area (ie pbench), then the Ansible code that invoked the
wrapper has to have knowledge of what the results file is, save it to the local directory the ansible script is running from

Example: linpack

Wrapper script
./run_linpack.sh -f -C $config -i $iterations -P $tuned_setting > /tmp/linpack_${tuned_setting}.out
tar cf /tmp/results_linpack_${tuned_setting}.tar results_linpack_tuned_${tuned_setting}


From ansible playbook that invoked the linpack script
working_dir is what is passed into ansible, as the directory we are running in.  By default that is
<test_prefix>_<cloud image, or local host name>
sys_config is the  sysctl file, or "none" if no sysctl file was provided

- name: copy linpack data
  fetch:
    src: "/tmp/results_linpack_{{ sys_confg }}.tar"
    dest: "{{ working_dir }}/"
    flat: yes

- name: copy linpack data phase 2
  fetch:
    src: "/tmp/linpack_{{ sys_confg }}.out"
    dest: "{{ working_dir }}/"
    flat: yes

