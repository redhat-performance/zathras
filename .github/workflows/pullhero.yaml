# This workflow is used to review pull requests, it is intended for a first pass review of a pull request.
# It is not intended to be a full review, but rather to provide a quick overview of the changes and catch any obvious issues.
# It can be triggered by:
# - opening a pull request
# - requesting a review
# - commenting on a pull request with the `/review` command
# Required secrets:
# - PULLHERO_API_KEY: The API key for the LLM API
# - PULLHERO_API_HOST: The host of the LLM API
# - PULLHERO_API_MODEL: The model to use for the LLM API
# - PULLHERO_API_ENDPOINT: The endpoint of the LLM API


on:
  pull_request:
    types: [opened, review_requested]
  issue_comment:
    types: [created]

jobs:
  pullhero:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
        (
          github.event_name == 'issue_comment' &&
          github.event.issue.pull_request != null &&
          startsWith(github.event.comment.body, '/review')
        )
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pullhero
        run: pip3 install "pullhero<1.0.0" || (echo "::error title=Pullhero Error::Pullhero failed to install" && exit 1)
      
      - name: Verify jq is installed
        run: |
          if ! command -v jq &> /dev/null; then
            echo "::warning title=jq Warning::jq could not be found, installing"
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Get pull request details
        if: github.event_name == 'pull_request'
        run: |
          echo "PR_NUMBER=$(jq -r '.pull_request.number' $GITHUB_EVENT_PATH)" >> $GITHUB_ENV
          echo "BASE_BRANCH=$(jq -r '.pull_request.base.ref' $GITHUB_EVENT_PATH)" >> $GITHUB_ENV
          echo "HEAD_BRANCH=$(jq -r '.pull_request.head.ref' $GITHUB_EVENT_PATH)" >> $GITHUB_ENV
      
      - name: Get PR Details (comment)
        if: github.event_name == 'issue_comment'
        run: |
          echo $GITHUB_EVENT_PATH
          echo "PR_NUMBER=$(jq -r '.issue.number' $GITHUB_EVENT_PATH)" >> $GITHUB_ENV
          
          # Use gh cli to get the branch names since event path does not contain that info
          BASE_BRANCH=$(gh pr view ${{ github.event.issue.number }} --json baseRefName | jq -r '.baseRefName')
          HEAD_BRANCH=$(gh pr view ${{ github.event.issue.number }} --json headRefName | jq -r '.headRefName')

          if [ -z "$BASE_BRANCH" ] || [ -z "$HEAD_BRANCH" ]; then
            echo "::error title=Pullhero Error::Failed to get PR branch names"
            exit 1
          fi

          echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV
          echo "HEAD_BRANCH=$HEAD_BRANCH" >> $GITHUB_ENV

      - name: Push code review
        run: >
          pullhero --vcs-provider github 
          --vcs-token ${{ secrets.GITHUB_TOKEN }}
          --vcs-change-id $PR_NUMBER
          --vcs-repository ${{ github.repository }}
          --vcs-change-type pr
          --agent review
          --agent-action comment
          --vcs-base-branch $BASE_BRANCH
          --vcs-head-branch $HEAD_BRANCH
          --llm-api-key ${{ secrets.PULLHERO_API_KEY }}
          --llm-api-host ${{ secrets.PULLHERO_API_HOST }}
          --llm-api-model ${{ secrets.PULLHERO_API_MODEL }}
          --llm-api-endpoint ${{ secrets.PULLHERO_API_ENDPOINT }} || 
          (echo "::error title=Pullhero Error::Pullhero failed to run" && exit 1)
